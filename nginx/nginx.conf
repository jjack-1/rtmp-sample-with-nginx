# 전역 설정: Nginx 프로세스를 실행할 사용자 계정 (옵션)
# user www-data; 

# 전역 설정: CPU 코어 수에 맞춰 워커 프로세스를 자동으로 조절
worker_processes auto;

# 전역 설정: 에러 로그 파일 위치
error_log /var/log/nginx/error.log warn;

# 전역 설정: Nginx 프로세스 ID(PID) 파일 위치
pid /var/run/nginx.pid;

# 1. 이벤트 처리 모델 설정 블록
events {
    # 워커 프로세스 당 처리할 수 있는 최대 동시 연결 수
    worker_connections 1024;
}

# 2. RTMP 프로토콜 처리 블록 (⭐️ 핵심 수정 부분)
rtmp {
    server {
        listen 1935;
        chunk_size 4096;

        # ✅ [수정] application live 블록이 모든 역할을 담당합니다.
        # 이제 Flutter 앱에서 보낸 스트림을 직접 HLS로 변환합니다.
        application live {
            live on;
            record off; # 녹화는 사용하지 않습니다.

            # ✅ [추가] HLS 변환을 활성화합니다.
            hls on;

            # ✅ [추가] HLS 파일 조각(.ts)과 재생목록(.m3u8)이 저장될 경로입니다.
            hls_path /tmp/hls;

            # ✅ [추가] HLS 파일 한 조각의 길이를 3초로 설정합니다.
            hls_fragment 3s;
            
            # ✅ [추가] m3u8 재생목록 파일에 유지할 전체 영상 길이를 60초로 설정합니다.
            hls_playlist_length 60s;

            # ❌ [제거] exec ffmpeg ... 명령어 전체를 삭제했습니다.
            # 이제 ffmpeg을 호출하지 않으므로, 메모리 부족 문제가 발생하지 않습니다.
        }

        # ❌ [제거] application hls { ... } 블록 전체를 삭제했습니다.
        # live 블록이 모든 것을 처리하므로 더 이상 필요 없습니다.
    }
}

# 3. HTTP 프로토콜 처리 블록 (기존과 거의 동일)
http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    access_log  /var/log/nginx/access.log  main;
    sendfile        on;
    tcp_nopush      on;
    keepalive_timeout  65;

    server {
        listen 80;

        # ✅ [수정] location /hls 블록의 root 경로를 hls_path와 맞춰줍니다.
        location /hls {
            # hls_path에 지정된 디렉토리를 웹에서 접근할 수 있도록 설정합니다.
            types {
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
            }
            root /tmp;
            add_header Cache-Control no-cache;
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, HEAD, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }
        }
    }
}